# todo: fzf + lsp-document-symbol?
# todo: set-faces for lsp-semantic-token
# todo: bufopen hook shouldn't trigger for first open, since that fasd updates for that from zsh hook
# todo: fix ctrl-d to care about whitespace.
# todo: if single char highlighted, first c-d should * and second should N (or is that already the case??)
# todo: alt-[kp] for stopping at camelcase word boundaries
# todo: crosshairs_line overwrites error background colour
# todo: restore open tabs when opening in "workspace" (git ? repo : dir)
# todo: buffer plugin
# debug: gdb-backtrace-up: gdb-backtrace no such buffer

# Hide release notes from latest version
set-option global startup_info_version 20200901

add-highlighter global/ number-lines -hlcursor -separator ' '
set-face global LineNumbers yellow,default
set-face global LineNumberCursor bright-yellow,default+r
set-face global MenuBackground white,black
set-face global MenuForeground white,bright-blue
set-face global MenuInfo green,default
set-face global Error rgb:1a1c1d,red
set-face global Information rgb:282a2e,cyan

add-highlighter global/ show-matching
set-face global MatchingChar blue,default+r

# hook global KakEnd .* %{ echo -to-file ~/.kak_history -quoting kakoune reg : %reg{:} }
# hook global KakBegin .* %{ try %{ source .kak_history } }

# need a better solution. this doesn't work if we start without args and then open.
# declare-option -hidden bool first_buf_open true
hook global BufOpenFile .* %{
  # echo -debug %opt{first_buf_open}
  nop %sh{
    # if [ $kak_opt_first_buf_open = "false" ]; then
      { eval "fasd --proc $(fasd --sanitize cmd $kak_hook_param)"; } >> "/dev/null" 2>&1
    # fi
  }
  # evaluate-commands %sh{
  #   if [ $kak_opt_first_buf_open = "true" ]; then
  #     echo set-option window first_buf_open false
  #   fi
  # }
}

hook global InsertCompletionShow .* %{
  try %{
    # this command temporarily removes cursors preceded by whitespace;
    # if there are no cursors left, it raises an error, does not
    # continue to execute the mapping commands, and the error is eaten
    # by the `try` command so no warning appears.
    execute-keys -draft 'h<a-K>\h<ret>'
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
  }
}

hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

hook global BufSetOption filetype=gas %{
  set-option buffer comment_line '#'
}

hook global InsertChar \t %{ exec -draft -itersel h@ }
set global tabstop 2
set global indentwidth 2

define-command -hidden -docstring \
"select a word under cursor, or add cursor on next occurrence of current selection" \
select-or-add-cursor %{
  try %{
    execute-keys "<a-k>\A.\z<ret>"
    execute-keys -save-regs '' "<a-i>w*"
  } catch %{
    execute-keys -save-regs '' "*<s-n>"
  } catch nop
}
map global normal '<c-d>' ': select-or-add-cursor<ret>' -docstring "add cursor on current word, and jump to the next match"
define-command -hidden -docstring \
"add cursor on next occurrence of current selection" \
add-cursor %{
  try %{
    execute-keys "<a-k>\A.\z<ret>"
    execute-keys -save-regs '' "<a-i>w*"
  } catch %{
    execute-keys -save-regs '' "*<s-n>"
  } catch nop
}
# map global insert '<c-d>' '<esc>: select-or-add-cursor<ret>i' -docstring "add cursor on current word, and jump to the next match"

map global normal <esc> <space>
map global normal <space> ,

map global user <space> '<esc>'

define-command -hidden i3-leave-fullscreen %{
  nop %sh{ i3-msg fullscreen disable }
}

map global menu <ret> <esc>

map global user / ': comment-line<ret>' -docstring "comment lines"
map global user c '<a-|> xclip -in -selection clipboard >&- 2>&- <ret>' -docstring "copy to clipboard"
map global user o ': i3-leave-fullscreen<ret>: fzf-files-git<ret>' -docstring 'open file in git repo or pwd with fzf'
map global user g ': i3-leave-fullscreen<ret>: fzf-gdb<ret>' -docstring 'run gdb with file from fasd+fzf'
map global user r ': i3-leave-fullscreen<ret>: ranger<ret>' -docstring 'run ranger'
map global user s ': lsp-document-symbol<ret>/' -docstring 'search document symbols'
map global user S ': lsp-workspace-symbol-incr<ret>' -docstring 'lsp-workspace-symbol-inc'
map global user f ': lsp-hover<ret>' -docstring 'lsp-hover'

# Plugins
source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "robertmeta/plug.kak" noload
plug "kak-lsp/kak-lsp" do %{
  cargo install --locked --force --path .
} config %{
  hook global WinSetOption filetype=cpp %{
    hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
    hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
    hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
    hook -once -always window WinSetOption filetype=.* %{
      remove-hooks window semantic-tokens
    }
  }
  set-option global lsp_insert_spaces true
  set-option global lsp_auto_highlight_references true
  hook global WinSetOption filetype=cpp %{
    hook window BufWritePre .* lsp-formatting-sync
  }
  set-face global Reference default,default+ub
  set-face global DiagnosticError Error
  set-face global DiagnosticWarning rgb:1a1c1d,yellow
}

# eval %sh{kak-lsp --kakoune -s $kak_session}
lsp-enable

# set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
source "%val{config}/gnome-terminal.kak"
require-module gnome-terminal

plug "Superty/alacritty.kak" %{
  require-module alacritty
}
hook global ModuleLoaded x11 %{
  alias global terminal alacritty-terminal
  alias global popup alacritty-terminal-popup
}

# prelude is a dependency for connect
plug alexherbo2/prelude.kak
plug Superty/connect.kak %{
  require-module connect
  require-module connect-fzf
  require-module connect-ranger
}

plug "occivink/kakoune-gdb" subset %{
  gdb.kak
} config %{
  declare-option -hidden str gdb_mode ''
}

plug "jjk96/kakoune-rainbow"

define-command enable-gdb-mode %{
  set-option window gdb_mode '[gdb-mode]'
  map window normal n ': gdb-next<ret>'
  map window normal s ': gdb-step<ret>'
  map window normal c ': gdb-continue-or-run<ret>'
  map window normal b ': gdb-toggle-breakpoint<ret>'
  map window normal <c-u> ': gdb-backtrace-up<ret>'
  map window normal <c-j> ': gdb-backtrace-down<ret>'
}

define-command disable-gdb-mode %{
  set-option window gdb_mode ''
  unmap window normal n ': gdb-next<ret>'
  unmap window normal s ': gdb-step<ret>'
  unmap window normal c ': gdb-continue-or-run<ret>'
  unmap window normal b ': gdb-toggle-breakpoint<ret>'
  unmap window normal <c-u> ': gdb-backtrace-up<ret>'
  unmap window normal <c-j> ': gdb-backtrace-down<ret>'
}

define-command toggle-gdb-mode %{ %sh{
  if [ "$kak_opt_gdb_mode" = '[gdb-mode]' ]; then
    echo "disable-gdb-mode"
  else
    echo "enable-gdb-mode"
  fi
} }
map global normal <c-g> ': toggle-gdb-mode<ret>'

plug "insipx/kak-crosshairs"
cursorline
set-face global crosshairs_line default,rgb:282a2e

plug "https://gitlab.com/Screwtapello/kakoune-state-save" %{
  hook global KakBegin .* %{
      state-save-reg-load colon
      state-save-reg-load pipe
      state-save-reg-load slash
  }

  hook global KakEnd .* %{
      state-save-reg-save colon
      state-save-reg-save pipe
      state-save-reg-save slash
  }
  hook global FocusOut .* %{ state-save-reg-save dquote }
  hook global FocusIn  .* %{ state-save-reg-load dquote }
}

plug "eraserhd/kak-ansi"

plug 'delapouite/kakoune-select-view' %{
  map global normal <a-%> ': select-view<ret>' -docstring 'select view'
}

set-option global modelinefmt ''
set-option -add global modelinefmt '%opt{gdb_mode} '
set-option -add global modelinefmt '{DiagnosticError}%sh{ n=$kak_opt_lsp_diagnostic_error_count; if [ $n -eq 1 ]; then echo "[1 error]"; elif [ $n -gt 1 ]; then echo "[$n errors]"; fi }{Default} '
set-option -add global modelinefmt '{DiagnosticWarning}%sh{ n=$kak_opt_lsp_diagnostic_warning_count; if [ $n -eq 1 ]; then echo "[1 warning]"; elif [ $n -gt 1 ]; then echo "[$n warnings]"; fi }{Default} '
set-option -add global modelinefmt '%val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} '

# swap x and a-x
map global normal x <a-x>
map global normal <a-x> x

# swap r and R
map global normal r R
map global normal R r

# d doesn't yank, <a-d> does
map global normal d <a-d>
map global norma <a-d> d

# <a-e> to go to definition
map global normal <a-e> ': lsp-definition<ret>vv'
# <a-w> and <a-q> for prev and next location
map global normal <a-w> '<c-o>vv'
map global normal <a-s-w> '<tab>vv'

# tab, ctrl-tab, ctrl-w for next, prev, close buffer
map global normal <tab> ': buffer-next<ret>'
map global normal <s-tab> ': buffer-previous<ret>'
map global normal <c-w> ': delete-buffer<ret>'

# j is the new o
map global normal <j> o
map global normal <s-j> <s-o>
map global normal <a-j> <a-o>

# , to paste
map global normal , <s-p>
# map global normal <s-h> <s-p>
# map global normal <a-h> <a-p>

# opkl for navigation
map global normal o k
map global normal l j
map global normal k h
map global normal p l
map global normal <s-o> <s-k>
map global normal <s-l> <s-j>
map global normal <s-k> <s-h>
map global normal <s-p> <s-l>
# map global normal <c-k> <a-b>
map global normal <c-k> <s-b>
# map global normal <c-p> <a-w>
map global normal <c-p> <s-w>

define-command -hidden -params 2 scroll -docstring 'scroll up/down count` scrolls count lines in that direction' %{
  execute-keys %sh{
    dir=$1
    count=$2
    set -- $kak_window_range
    kak_window_top=$(($1 + 1))
    kak_window_bottom=$(($1 + $3))
    if [ $dir = "down" ]; then
      if [ "$kak_window_top" = "$kak_cursor_line" ]; then
        echo "<space><semicolon>${count}j${count}vj"
      else
        echo ${count}vj
      fi
    elif [ $dir = "up" ]; then
      if [ "$kak_window_top" = 1 ]; then
        echo ${count}k
      elif [ "$kak_window_bottom" = "$kak_cursor_line" ]; then
        echo "<space><semicolon>${count}k${count}vk"
      else
        echo ${count}vk
      fi
    fi
} }
# c-o, c-l and a-o, a-l to scroll
map global normal <a-o> ': scroll up 1<ret>'
map global normal <a-l> ': scroll down 1<ret>'
map global normal <c-o> ': scroll up 1<ret>'
map global normal <c-l> ': scroll down 1<ret>'
map global normal <c-up> ': scroll up 1<ret>'
map global normal <c-down> ': scroll down 1<ret>'

map global normal <c-a-o> <c-u>
map global normal <c-a-l> <c-d>

map global prompt <c-p> <a-f>
map global prompt <c-k> <a-b>
map global prompt <c-h> <c-w>
map global prompt <c-o> <up>
map global prompt <c-l> <down>
map global prompt <a-k> <left>
map global prompt <a-p> <right>

# # unlearn old habits
# map global insert <c-left> '<esc><a-b>i'
# map global insert <c-s-left> '<esc><a-s-b>i'
# map global insert <c-right> '<esc><a-w>a'
# map global insert <c-s-right> '<esc><a-s-w>a'
# map global insert <s-up> '<esc><s-up>'
# map global insert <s-down> '<esc><s-down>'

# map global normal <up> ': echo use opkl da<ret>'
# map global normal <down> ': echo use opkl da<ret>'
# map global normal <left> ': echo use opkl da<ret>'
# map global normal <right> ': echo use opkl da<ret>'
# map global normal <s-up> ': echo use opkl da<ret>'
# map global normal <s-down> ': echo use opkl da<ret>'
# map global normal <s-left> ': echo use opkl da<ret>'
# map global normal <s-right> ': echo use opkl da<ret>'
# map global insert <up> '<esc>: echo use opkl da<ret>'
# map global insert <down> '<esc>: echo use opkl da<ret>'
# map global insert <left> '<esc>: echo use opkl da<ret>'
# map global insert <right> '<esc>: echo use opkl da<ret>'
# map global insert <esc> ': echo use opkl da'
